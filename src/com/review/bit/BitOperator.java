package com.review.bit;


/**
 * 计算机中的位运算
 * 现代计算机全都采用的是二进制，从右向左的升高位
 * <p>
 * 原码，反码，补码
 * 1，二进制的最高位是符号为，0表示整数，1表示负数
 * 2，整数的原码，反码，补码都是同一个
 * 3，负数的反码是在原码的基础上，符号位（最高位）不变，其他位取反。也就是0变1 1变0
 * 4，负数的补码 = 它的反码 + 1， 由此可得负数的反码 = 补码 - 1
 * 5，0的反码，补码都是0
 * 6，java中没有不带符号位的
 * 7，计算机中都是以补码的方式运算
 * 8，要想看运算结果，需要看他的原码（也就是从补码推倒到原码）
 * 推导方式：
 * 反码 = 补码 -1
 * 原码 = 反码符号位不变，其他取反
 * <p>
 * java中7个位元算：&
 * 按位与 & ： 两位全为1，结果为1，否则为0
 * 按位或 ｜ ：两位有一个为1，结果为1，否则为0
 * 按位异或 ^ ： 两位一个为0一个为1，结果为1，否则为0
 * 按位取反 ～ ： 0变1 1变0
 */
public class BitOperator {

    public static void main(String[] args) {

        /**
         * 2原码：00000000 00000000 00000000 00000010
         *  整数三码合一
         *  补码：00000000 00000000 00000000 00000010
         *
         * 3原码：00000000 00000000 00000000 00000011
         *  补码：00000000 00000000 00000000 00000011
         *
         *  2&3：两位全为1，结果为1，否则为0
         *  00000000 00000000 00000000 00000010
         *  00000000 00000000 00000000 00000011
         *  结果为：
         *  00000000 00000000 00000000 00000010 （补码）
         *  原码：00000000 00000000 00000000 00000010
         *  结果为2
         */
        System.out.println(2 & 3);    //2


        /**
         * -2 的原码：
         * 10000000 00000000 00000000 00000010
         * 补码：
         * 先要得到反码：符号位不变，其他取反
         * 11111111 11111111 11111111 11111101
         * 补码 = 反码 + 1
         * 11111111 11111111 11111111 11111110
         *
         * 取反：得到的是补码
         * 00000000 00000000 00000000 00000001
         * 由于是一个整数，因此他的原码，和反码都是这个
         * 原码：
         * 00000000 00000000 00000000 00000001
         */
        System.out.println(~-2);    // 1


        /**
         * 原码：00000000 00000000 00000000 00000010
         * 补码：00000000 00000000 00000000 00000010
         *
         * 按位取反：11111111 11111111 11111111 11111101
         *
         * 补码：11111111 11111111 11111111 11111101
         * 负数的反码 = 补码 - 1
         *  11111111 11111111 11111111 11111100
         *  负数的原码 = 反码取反
         *  10000000 00000000 00000000 00000011
         *
         *  结果为-3
         *
         */
        System.out.println(~2); // -2147483645
        /**
         * 2原码：00000000 00000000 00000000 00000010
         * 3原码：00000000 00000000 00000000 00000011
         *
         *按位或：只要有一个为1，结果为1
         *      00000000 00000000 00000000 00000011
         *
         * 正数三码合一：3
         */
        System.out.println(2 | 3);    //3


        /**
         * 2原码：00000000 00000000 00000000 00000010
         * 3原码：00000000 00000000 00000000 00000011
         *
         *按位异或：相同为0，不同为1
         *       00000000 00000000 00000000 00000001
         *
         * 正数三码合一：3
         */
        System.out.println(2 ^ 3);    //1

    }

}
